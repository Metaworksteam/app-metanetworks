datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  USER
  ADMIN
  COMPLIANCE_MANAGER
  AUDITOR
}

enum ComplianceStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  OVERDUE
}

model Account {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String  @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  
  // New fields for role and last login
  role          UserRole  @default(USER)
  lastLogin     DateTime?

  accounts      Account[]
  sessions      Session[]
  assignedCompliances Compliance[]
  
  // Audit trail
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Compliance {
  id            String           @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String
  status        ComplianceStatus @default(PENDING)
  
  // Relationships
  assignedTo    User             @relation(fields: [assignedToId], references: [id])
  assignedToId  String           @db.ObjectId
  
  // Tracking
  startDate     DateTime
  dueDate       DateTime
  completedDate DateTime?
  
  // Audit trail
  createdBy     String           @db.ObjectId
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
